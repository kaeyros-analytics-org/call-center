scenario_df$Scenario <- gsub("^(\\d{1,}: |for )", "", scenario_df$Scenario)
# Trouver les indices des scénarios contenant le terme "Tapez"
indices <- grep("Press", scenario_df$Scenario)
# Supprimer les scénarios correspondants du dataframe
scenario_df <- scenario_df[-indices, ]
# Réinitialiser les index du dataframe
rownames(scenario_df) <- NULL
# Trier les données par nombre d'occurrences
scenario_df <- scenario_df[order(scenario_df$Count, decreasing = TRUE), ]
# Créer un graphique interactif avec Plotly
plot_ly(scenario_df, x = ~Count, y = ~Scenario, type = 'bar', orientation = 'h') %>%
layout(title = "Fréquence des scénarios de chatbot",
xaxis = list(title = "Nombre d'occurrences"),
yaxis = list(title = "Scénario"))
runApp()
runApp()
runApp()
shiny::runApp()
wordcloud2(demoFreq)
wordcloud2(demoFreq)
shiny::runApp()
wordcloud2(word_freq_df)
wordcloud2(word_freq_df, size = 2)
shiny::runApp()
df
require(quanteda)
require(quanteda.sentiment)
data_en[2]
data_en[2,]
df[[2]]
data_en[c("Start_time_discusion","customer_agent_discussion")]
data_en[2,c("Start_time_discusion","customer_agent_discussion")]
data_en[8,c("Start_time_discusion","customer_agent_discussion")]
data_en[9,c("Start_time_discusion","customer_agent_discussion")]
# Créer un vecteur pour stocker les valeurs des clients et les temps de début de discussion correspondants
client_values <- c()
start_times <- c()
# Parcourir les colonnes de 10 à 50
for (i in 10:50) {
# Extraire les valeurs de la colonne i pour les discussions client
values <- data_en[[i]][data_en[["customer_agent_discussion"]] == "client", "value"]
# Extraire les temps de début de discussion correspondants
times <- data_en[[i]][data_en[["customer_agent_discussion"]] == "client", "Start_time_discusion"]
# Ajouter les valeurs et les temps extraits aux vecteurs correspondants
client_values <- c(client_values, values)
start_times <- c(start_times, times)
}
# Créer des vecteurs vides pour stocker les valeurs des clients et les temps de début de discussion correspondants
client_values <- c()
start_times <- c()
# Parcourir les colonnes de 10 à 50
for (i in 10:50) {
# Extraire les valeurs de la colonne i pour les discussions client
for (j in 1:length(data_en[[i]])) {
if (data_en[["customer_agent_discussion"]][j] == "client") {
# Extraire les valeurs individuelles de la cellule
values <- unlist(data_en[[i]][j, "value"])
# Répéter le temps de début de discussion pour chaque valeur extraite
times <- rep(data_en[[i]][j, "Start_time_discusion"], length(values))
# Ajouter les valeurs et les temps extraits aux vecteurs correspondants
client_values <- c(client_values, values)
start_times <- c(start_times, times)
}
}
}
# Créer un dataframe avec les valeurs et les temps extraits
df_client_discussions <- data.frame(Start_time_discusion = start_times, client_values = client_values)
df_client_discussions
# Parcourir les colonnes de 10 à 50
for (i in 10:50) {
# Extraire les valeurs de la colonne i pour les discussions client
for (j in 1:length(data_en[[i]])) {
if (data_en[["customer_agent_discussion"]][j] == "client") {
# Extraire les valeurs individuelles de la cellule
values <- unlist(data_en[[i]][j, "value"])
# Répéter le temps de début de discussion pour chaque valeur extraite
times <- rep(data_en[[i]][j, "Start_time_discusion"], length(values))
# Ajouter les valeurs et les temps extraits aux vecteurs correspondants
client_values <- c(client_values, values)
start_times <- c(start_times, times)
}
}
}
values <- data_en[[8]][data_en[["customer_agent_discussion"]] == "client", "value"]
values <- data_en[8,][data_en[["customer_agent_discussion"]] == "client", "value"]
values
values <- data_en[45,][data_en[["customer_agent_discussion"]] == "client", "value"]
values
values <- data_en[45,][data_en[["customer_agent_discussion"]][[1]] == "client", "value"]
values
values <- data_en[50,][data_en[["customer_agent_discussion"]][[1]] == "client", "value"]
values
values <- data_en[50,][data_en[["customer_agent_discussion"]][[1]]$key == "client", "value"]
values
[data_en[["customer_agent_discussion"]][[1]]$key == "client", "value"]
data_en[["customer_agent_discussion"]][[1]]$key == "client", "value"]
[data_en[["customer_agent_discussion"]][[1]]$key == "client", "value"]
data_endata_en[["customer_agent_discussion"]][data_en[["customer_agent_discussion"]][[45]]$key == "client", "value"]
data_en[["customer_agent_discussion"]][data_en[["customer_agent_discussion"]][[45]]$key == "client", "value"]
data_en[["customer_agent_discussion"]][[45]][data_en[["customer_agent_discussion"]][[45]]$key == "client", "value"]
# Créer un vecteur pour stocker les valeurs des clients et les temps de début de discussion correspondants
client_values <- c()
start_times <- c()
# Parcourir les colonnes de 10 à 50
for (i in 10:50) {
# Extraire les valeurs de la colonne i pour les discussions client
values <- data_en[["customer_agent_discussion"]][[i]][data_en[["customer_agent_discussion"]][[i]]$key == "client", "value"]
# Extraire les temps de début de discussion correspondants
times <- rep(data_en$Start_time_agent[i], length(values))
# Ajouter les valeurs et les temps extraits aux vecteurs correspondants
client_values <- c(client_values, values)
start_times <- c(start_times, times)
}
# Créer un dataframe avec les valeurs et les temps extraits
df_client_discussions <- data.frame(Start_time_discusion = start_times, client_values = client_values)
View(df_client_discussions)
# Créer un vecteur pour stocker les valeurs des clients et les temps de début de discussion correspondants
client_values <- c()
start_times <- c()
indices <- c()
# Parcourir les colonnes de 10 à 50
for (i in 10:50) {
# Extraire les valeurs de la colonne i pour les discussions client
values <- data_en[["customer_agent_discussion"]][[i]][data_en[["customer_agent_discussion"]][[i]]$key == "client", "value"]
# Extraire les temps de début de discussion correspondants
times <- rep(data_en$Start_time_agent[i], length(values))
# Ajouter les valeurs et les temps extraits aux vecteurs correspondants
client_values <- c(client_values, values)
start_times <- c(start_times, times)
indices <- c(indices, i)
}
# Créer un dataframe avec les valeurs et les temps extraits
df_client_discussions <- data.frame(indices=indices, Start_time_discusion = start_times, client_values = client_values)
indices <- rep(i, length(values))
# Parcourir les colonnes de 10 à 50
for (i in 10:50) {
# Extraire les valeurs de la colonne i pour les discussions client
values <- data_en[["customer_agent_discussion"]][[i]][data_en[["customer_agent_discussion"]][[i]]$key == "client", "value"]
# Extraire les temps de début de discussion correspondants
times <- rep(data_en$Start_time_agent[i], length(values))
indices <- rep(i, length(values))
# Ajouter les valeurs et les temps extraits aux vecteurs correspondants
client_values <- c(client_values, values)
start_times <- c(start_times, times)
indices <- c(indices, i)
}
# Créer un dataframe avec les valeurs et les temps extraits
df_client_discussions <- data.frame(indices=indices, Start_time_discusion = start_times, client_values = client_values)
# Parcourir les colonnes de 10 à 50
for (i in 10:50) {
# Extraire les valeurs de la colonne i pour les discussions client
values <- data_en[["customer_agent_discussion"]][[i]][data_en[["customer_agent_discussion"]][[i]]$key == "client", "value"]
# Extraire les temps de début de discussion correspondants
times <- rep(data_en$Start_time_agent[i], length(values))
indice <- rep(i, length(values))
# Ajouter les valeurs et les temps extraits aux vecteurs correspondants
client_values <- c(client_values, values)
start_times <- c(start_times, times)
indices <- c(indices, indice)
}
# Créer un dataframe avec les valeurs et les temps extraits
df_client_discussions <- data.frame(indices=indices, Start_time_discusion = start_times, client_values = client_values)
# Créer un vecteur pour stocker les valeurs des clients et les temps de début de discussion correspondants
client_values <- c()
start_times <- c()
indices <- c()
# Parcourir les colonnes de 10 à 50
for (i in 10:50) {
# Extraire les valeurs de la colonne i pour les discussions client
values <- data_en[["customer_agent_discussion"]][[i]][data_en[["customer_agent_discussion"]][[i]]$key == "client", "value"]
# Extraire les temps de début de discussion correspondants
times <- rep(data_en$Start_time_agent[i], length(values))
indice <- rep(i, length(values))
# Ajouter les valeurs et les temps extraits aux vecteurs correspondants
client_values <- c(client_values, values)
start_times <- c(start_times, times)
indices <- c(indices, indice)
}
# Créer un dataframe avec les valeurs et les temps extraits
df_client_discussions <- data.frame(indices=indices, Start_time_discusion = start_times, client_values = client_values)
data_en[31,]
# Créer un vecteur pour stocker les valeurs des clients et les temps de début de discussion correspondants
client_values <- c()
start_times <- c()
indices <- c()
# Parcourir les colonnes de 10 à 50
for (i in 10:50) {
# Extraire les valeurs de la colonne i pour les discussions client
values <- data_en[["customer_agent_discussion"]][[i]][data_en[["customer_agent_discussion"]][[i]]$key == "client", "value"]
# Extraire les temps de début de discussion correspondants
times <- rep(data_en$Start_time_discusion[i], length(values))
indice <- rep(i, length(values))
# Ajouter les valeurs et les temps extraits aux vecteurs correspondants
client_values <- c(client_values, values)
start_times <- c(start_times, times)
indices <- c(indices, indice)
}
# Créer un dataframe avec les valeurs et les temps extraits
df_client_discussions <- data.frame(indices=indices, Start_time_discusion = start_times, client_values = client_values)
View(df_client_discussions)
# Créer un vecteur pour stocker les valeurs des clients et les temps de début de discussion correspondants
client_values <- c()
start_times <- c()
# Parcourir les colonnes de 10 à 50
for (i in 10:50) {
# Extraire les valeurs de la colonne i pour les discussions client
values <- data_en[["customer_agent_discussion"]][[i]][data_en[["customer_agent_discussion"]][[i]]$key == "client", "value"]
# Extraire les temps de début de discussion correspondants
times <- rep(data_en$Start_time_discusion[i], length(values))
# Ajouter les valeurs et les temps extraits aux vecteurs correspondants
client_values <- c(client_values, values)
start_times <- c(start_times, times)
}
# Créer un dataframe avec les valeurs et les temps extraits
df_client_discussions <- data.frame(Start_time_discusion = start_times, client_values = client_values)
# Convertir le texte en minuscules
client_values <- tolower(client_values)
# Supprimer la ponctuation
client_values <- gsub("[[:punct:]]", " ", client_values)
# Supprimer les chiffres
client_values <- gsub("\\d+", "", client_values)
file_pretrained = system.file("language_identification/lid.176.ftz", package = "fastText")
dtbl_out <- language_identification(client_values, file_pretrained)
indexes <- which(dtbl_out$iso_lang_1 == "en")
library(jsonlite)
library(tm)
library(SnowballC)
library(textstem)
library(stringr)
library(writexl)
library(readxl)
library(purrr)
library(cld3)
library(textcat)
library(fastText)
library(topicmodels)
library(tidytext)
library(LDAvis)
library(quanteda)
library(Rmpfr)
library(servr)
library(slam)
library(wordcloud2)
library(rJava)
library(shiny.fluent)
library(shinymanager)
library(reactable)
library(sf)
library(shinyWidgets)
library(markdown)
library(stringr)
library(leaflet)
library(plotly)
library(DT)
library(shinycssloaders)
library(pool)
library(readxl)
library(shinyjs)
library(openxlsx)
library(glue)
library(rintrojs)
library(shinyjs)
library(dplyr)
library(lubridate)
library(flextable)
library(keyring)
library(shiny)
library(shinydashboard)
library(daterangepicker)
require(quanteda)
require(quanteda.sentiment)
file_pretrained = system.file("language_identification/lid.176.ftz", package = "fastText")
dtbl_out <- language_identification(client_values, file_pretrained)
indexes <- which(dtbl_out$iso_lang_1 == "en")
client_values <- client_values[indexes]
client_values
# Obtention des sentiments
sentiment_scores <- get_nrc_sentiment(client_values, lang="english")
library(syuzhet)
# Obtention des sentiments
sentiment_scores <- get_nrc_sentiment(client_values, lang="english")
emotions <- colSums(prop.table(sentiment_scores[, 1:8]))
pourcentage_positive  <- colSums(prop.table(sentiment_scores[, 9:10]))
pourcentage_positive[2]
plot_ly(labels = names(emotions), values = emotions, type = "pie", hole = 0.5) %>%
add_annotations(
text = paste0(round(pourcentage_positive[2]*100, 2),  "% positive"),
x = 0.5, y = 0.5, showarrow = FALSE, font = list(size = 20, color = "gray")) %>%
add_trace(
textinfo = "percent",
hoverinfo = "text+percent",
text = ~paste(names(emotions)))
runApp()
#import data
root <- getwd()
path_data <- file.path(root,"data")
path_data_AFB23 <- file.path(path_data,"info_data_AFB2023.json")
# read data2
info_data_AFB2023 <- fromJSON(path_data_AFB23)
library(jsonlite)
#import data
root <- getwd()
path_data <- file.path(root,"data")
path_data_AFB23 <- file.path(path_data,"info_data_AFB2023.json")
# read data2
info_data_AFB2023 <- fromJSON(path_data_AFB23)
info_data_AFB2023$Start_time_discusion <- ymd_hms(info_data_AFB2023$Start_time_discusion)
library(lubridate)
#import data
root <- getwd()
path_data <- file.path(root,"data")
path_data_AFB23 <- file.path(path_data,"info_data_AFB2023.json")
# read data2
info_data_AFB2023 <- fromJSON(path_data_AFB23)
info_data_AFB2023$Start_time_discusion <- ymd_hms(info_data_AFB2023$Start_time_discusion)
info_data_AFB2023$End_time_discusion <- ymd_hms(info_data_AFB2023$End_time_discusion)
info_data_AFB2023$Start_time_chatbot <- ymd_hms(info_data_AFB2023$Start_time_chatbot)
info_data_AFB2023$End_time_chatbot <- ymd_hms(info_data_AFB2023$End_time_chatbot)
info_data_AFB2023$Start_time_agent <- ymd_hms(info_data_AFB2023$Start_time_agent)
info_data_AFB2023$End_time_agent <- ymd_hms(info_data_AFB2023$End_time_agent)
data <- info_data_AFB2023
resquest_analysis_data <- info_data_AFB2023
###### data to display total chat duration #########
# Calculer la différence entre les temps de fin et de début de discussion en secondes
diff_seconds <- as.numeric(difftime(resquest_analysis_data$End_time_discusion, resquest_analysis_data$Start_time_discusion, units = "secs"))
###### data to display total chat duration #########
# Calculer la différence entre les temps de fin et de début de discussion en secondes
diff_seconds <- as.numeric(difftime(resquest_analysis_data$End_time_discusion, resquest_analysis_data$Start_time_discusion, units = "secs"))
resquest_analysis_data$duration_chat_s <- diff_seconds
resquest_analysis_data$time <- format(resquest_analysis_data$Start_time_discusion, format = "%H:%M:%S")
resquest_analysis_data$time <- as.POSIXct(resquest_analysis_data$time, format = "%H:%M:%S")
resquest_analysis_data$time
# Définir les bornes des intervalles
intervals <- seq.POSIXt(min(resquest_analysis_data$time), max(resquest_analysis_data$time) + 1800, by = "30 min")
intervals
labels <- format(intervals, "%H:%M")
# Créer la colonne time_period basée sur les intervalles
resquest_analysis_data$time_period <- cut(resquest_analysis_data$time, breaks = intervals, labels = head(labels, -1))
resquest_analysis_data$time_period
# Créer la colonne date contenant le jour de la semaine correspondant
Sys.setlocale("LC_TIME", "C")
resquest_analysis_data$date <- weekdays(resquest_analysis_data$Start_time_discusion)
resquest_analysis_data$date
# Convertir le dataframe en JSON
json_data <- toJSON(resquest_analysis_data)
# Exporter le JSON
writeLines(json_data)
file.path(path_data,"resquest_analysis_data","resquest_analysis_data.json")
# Spécifier le chemin et le nom de fichier pour l'exportation
output_file <- file.path(path_data,"resquest_analysis_data","resquest_analysis_data.json")
# Exporter le JSON
writeLines(resquest_analysis_data, output_file)
str(resquest_analysis_data)
resquest_analysis_data <- resquest_analysis_data[c("Start_time_discusion","time_period","date")]
str(resquest_analysis_data)
# Exporter le JSON
writeLines(resquest_analysis_data, output_file)
# Convertir le dataframe en JSON
resquest_analysis_data <- toJSON(resquest_analysis_data)
# Spécifier le chemin et le nom de fichier pour l'exportation
output_file <- file.path(path_data,"resquest_analysis_data","resquest_analysis_data.json")
# Exporter le JSON
writeLines(resquest_analysis_data, output_file)
# data_per_day_hour$time_period <- cut(data_per_day_hour$time, breaks = intervals, labels = head(labels, -1))
#
# # Créer la colonne date contenant le jour de la semaine correspondant
# Sys.setlocale("LC_TIME", "C")
# data_per_day_hour$date <- weekdays(data_per_day_hour$Start_time_discusion)
#
#
#
# ##### Data to display request_per_month ######
# data_request_per_month <- data[c("Start_time_discusion")]
resquest_analysis_file <- file.path(path_data,"resquest_analysis_data","resquest_analysis_data.json")
resquest_analysis_data <- fromJSON(resquest_analysis_file)
library(jsonlite)
library(lubridate)
#import data
root <- getwd()
path_data <- file.path(root,"data")
path_data_AFB23 <- file.path(path_data,"info_data_AFB2023.json")
# read data2
info_data_AFB2023 <- fromJSON(path_data_AFB23)
info_data_AFB2023$Start_time_discusion <- ymd_hms(info_data_AFB2023$Start_time_discusion)
info_data_AFB2023$End_time_discusion <- ymd_hms(info_data_AFB2023$End_time_discusion)
info_data_AFB2023$Start_time_chatbot <- ymd_hms(info_data_AFB2023$Start_time_chatbot)
info_data_AFB2023$End_time_chatbot <- ymd_hms(info_data_AFB2023$End_time_chatbot)
info_data_AFB2023$Start_time_agent <- ymd_hms(info_data_AFB2023$Start_time_agent)
info_data_AFB2023$End_time_agent <- ymd_hms(info_data_AFB2023$End_time_agent)
resquest_analysis_data <- info_data_AFB2023
####### data to display Total Chat Entry ##########
###### data to display total chat duration #########
# Calculer la différence entre les temps de fin et de début de discussion en secondes
diff_seconds <- as.numeric(difftime(resquest_analysis_data$End_time_discusion, resquest_analysis_data$Start_time_discusion, units = "secs"))
resquest_analysis_data$duration_chat_s <- diff_seconds
##### Data to display request_per_day_hour ######
resquest_analysis_data$request_per_day_hour <- resquest_analysis_data[c("Start_time_discusion")]
resquest_analysis_data$time <- format(resquest_analysis_data$Start_time_discusion, format = "%H:%M:%S")
resquest_analysis_data$time <- as.POSIXct(resquest_analysis_data$time, format = "%H:%M:%S")
# Définir les bornes des intervalles
intervals <- seq.POSIXt(min(resquest_analysis_data$time), max(resquest_analysis_data$time) + 1800, by = "30 min")
labels <- format(intervals, "%H:%M")
# Créer la colonne time_period basée sur les intervalles
resquest_analysis_data$time_period <- cut(resquest_analysis_data$time, breaks = intervals, labels = head(labels, -1))
# Créer la colonne date contenant le jour de la semaine correspondant
Sys.setlocale("LC_TIME", "C")
resquest_analysis_data$date <- weekdays(resquest_analysis_data$Start_time_discusion)
resquest_analysis_data <- resquest_analysis_data[c("Start_time_discusion","duration_chat_s","time_period","date")]
# Convertir le dataframe en JSON
resquest_analysis_data <- toJSON(resquest_analysis_data)
# Spécifier le chemin et le nom de fichier pour l'exportation
output_file <- file.path(path_data,"resquest_analysis_data","resquest_analysis_data.json")
# Exporter le JSON
writeLines(resquest_analysis_data, output_file)
# data_per_day_hour$time_period <- cut(data_per_day_hour$time, breaks = intervals, labels = head(labels, -1))
#
# # Créer la colonne date contenant le jour de la semaine correspondant
# Sys.setlocale("LC_TIME", "C")
# data_per_day_hour$date <- weekdays(data_per_day_hour$Start_time_discusion)
#
#
#
# ##### Data to display request_per_month ######
# data_request_per_month <- data[c("Start_time_discusion")]
resquest_analysis_file <- file.path(path_data,"resquest_analysis_data","resquest_analysis_data.json")
resquest_analysis_data <- fromJSON(resquest_analysis_file)
shiny::runApp()
shiny::runApp()
monthly_data <- resquest_analysis_data() %>%
group_by(month = format(Start_time_discusion, "%b.%Y")) %>%
summarise(total_requests = n()) %>%
mutate(month_date = as.Date(paste(month, "01", sep = "-"), format = "%b.%Y-%d")) %>%
arrange(month_date)
monthly_data <- resquest_analysis_data %>%
group_by(month = format(Start_time_discusion, "%b.%Y")) %>%
summarise(total_requests = n()) %>%
mutate(month_date = as.Date(paste(month, "01", sep = "-"), format = "%b.%Y-%d")) %>%
arrange(month_date)
rlang::last_trace()
str(resquest_analysis_data)
resquest_analysis_data$Start_time_discusion <- ymd_hms(resquest_analysis_data$Start_time_discusion)
monthly_data <- resquest_analysis_data %>%
group_by(month = format(Start_time_discusion, "%b.%Y")) %>%
summarise(total_requests = n()) %>%
mutate(month_date = as.Date(paste(month, "01", sep = "-"), format = "%b.%Y-%d")) %>%
arrange(month_date)
plot_ly(monthly_data, x = ~month_date, y = ~total_requests, type = "scatter", mode = "markers+lines",
marker = list(color = "gray90"), line = list(color = "gray90"),
text = ~paste("Month: ", format(month_date, "%b %Y") , "<br>Number: ", total_requests )) %>%
layout(xaxis = list(title = "Month"), yaxis = list(title = "Number of requests")) %>%
plotly:: style(hoverinfo = "text")
runApp()
library(jsonlite)
library(lubridate)
#import data
root <- getwd()
path_data <- file.path(root,"data")
path_data_AFB23 <- file.path(path_data,"info_data_AFB2023.json")
# read data2
resquest_analysis_data <- fromJSON(path_data_AFB23)
####### data to display Total Chat Entry ##########
###### data to display total chat duration #########
# Calculer la différence entre les temps de fin et de début de discussion en secondes
diff_seconds <- as.numeric(difftime(resquest_analysis_data$End_time_discusion, resquest_analysis_data$Start_time_discusion, units = "secs"))
resquest_analysis_data$duration_chat_s <- diff_seconds
##### Data to display request_per_day_hour ######
resquest_analysis_data$request_per_day_hour <- resquest_analysis_data[c("Start_time_discusion")]
resquest_analysis_data$time <- format(resquest_analysis_data$Start_time_discusion, format = "%H:%M:%S")
resquest_analysis_data$time <- as.POSIXct(resquest_analysis_data$time, format = "%H:%M:%S")
# Définir les bornes des intervalles
intervals <- seq.POSIXt(min(resquest_analysis_data$time), max(resquest_analysis_data$time) + 1800, by = "30 min")
library(jsonlite)
library(lubridate)
#import data
root <- getwd()
path_data <- file.path(root,"data")
path_data_AFB23 <- file.path(path_data,"info_data_AFB2023.json")
# read data2
info_data_AFB2023 <- fromJSON(path_data_AFB23)
info_data_AFB2023$Start_time_discusion <- ymd_hms(info_data_AFB2023$Start_time_discusion)
info_data_AFB2023$End_time_discusion <- ymd_hms(info_data_AFB2023$End_time_discusion)
info_data_AFB2023$Start_time_chatbot <- ymd_hms(info_data_AFB2023$Start_time_chatbot)
info_data_AFB2023$End_time_chatbot <- ymd_hms(info_data_AFB2023$End_time_chatbot)
info_data_AFB2023$Start_time_agent <- ymd_hms(info_data_AFB2023$Start_time_agent)
info_data_AFB2023$End_time_agent <- ymd_hms(info_data_AFB2023$End_time_agent)
resquest_analysis_data <- info_data_AFB2023
####### data to display Total Chat Entry ##########
###### data to display total chat duration #########
# Calculer la différence entre les temps de fin et de début de discussion en secondes
diff_seconds <- as.numeric(difftime(resquest_analysis_data$End_time_discusion, resquest_analysis_data$Start_time_discusion, units = "secs"))
resquest_analysis_data$duration_chat_s <- diff_seconds
##### Data to display request_per_day_hour ######
resquest_analysis_data$request_per_day_hour <- resquest_analysis_data[c("Start_time_discusion")]
resquest_analysis_data$time <- format(resquest_analysis_data$Start_time_discusion, format = "%H:%M:%S")
resquest_analysis_data$time <- as.POSIXct(resquest_analysis_data$time, format = "%H:%M:%S")
# Définir les bornes des intervalles
intervals <- seq.POSIXt(min(resquest_analysis_data$time), max(resquest_analysis_data$time) + 1800, by = "30 min")
labels <- format(intervals, "%H:%M")
# Créer la colonne time_period basée sur les intervalles
resquest_analysis_data$time_period <- cut(resquest_analysis_data$time, breaks = intervals, labels = head(labels, -1))
# Créer la colonne date contenant le jour de la semaine correspondant
Sys.setlocale("LC_TIME", "C")
resquest_analysis_data$date <- weekdays(resquest_analysis_data$Start_time_discusion)
# Selection des variables pertinante pour le display
resquest_analysis_data <- resquest_analysis_data[c("Start_time_discusion","duration_chat_s","time_period","date")]
# Convertir le dataframe en JSON
resquest_analysis_data <- toJSON(resquest_analysis_data)
# Spécifier le chemin et le nom de fichier pour l'exportation
output_file <- file.path(path_data,"resquest_analysis_data","resquest_analysis_data.json")
# Exporter le JSON
writeLines(resquest_analysis_data, output_file)
shiny::runApp()
