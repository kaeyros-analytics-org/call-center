e_y_axis(name = "Scénario")%>%
e_toolbox_feature() %>%
e_toolbox_feature(
feature = "magicType",
type = list("line", "bar")
)
top_30 %>%
e_charts(Count) %>%
e_bar(Scenario, y_index = 0,
x_index = 0) %>%
e_tooltip(trigger = "axis", axisPointer = list(type = "shadow")) %>%
e_x_axis(name = "Occurrences") %>%
e_y_axis(name = "Scénario")%>%
e_toolbox_feature() %>%
e_toolbox_feature(
feature = "magicType",
type = list("line", "bar")
)
top_30 %>%
e_charts(Count) %>%
e_bar(Scenario, y_index = 0,
x_index = 0) %>%
e_tooltip(trigger = "axis", axisPointer = list(type = "shadow")) %>%
e_x_axis(name = "Occurrences") %>%
e_y_axis(name = "Scénario")%>%
e_toolbox_feature() %>%
e_toolbox_feature(
feature = "magicType",
type = list("line", "bar")
)
top_30 %>%
e_charts(Count) %>%
e_bar(Scenario, y_index = 1,
x_index = 0) %>%
e_tooltip(trigger = "axis", axisPointer = list(type = "shadow")) %>%
e_x_axis(name = "Occurrences") %>%
e_y_axis(name = "Scénario")%>%
e_toolbox_feature() %>%
e_toolbox_feature(
feature = "magicType",
type = list("line", "bar")
)
top_30 %>%
e_charts(Count) %>%
e_bar(Scenario, y_index = 1,
x_index = 0) %>%
e_tooltip(trigger = "axis", axisPointer = list(type = "shadow")) %>%
e_x_axis(name = "Scénario") %>%
e_y_axis(name = "Occurrences")%>%
e_toolbox_feature() %>%
e_toolbox_feature(
feature = "magicType",
type = list("line", "bar")
)
top_30 %>%
e_charts(Count) %>%
e_bar(Scenario, y_index = 0,
x_index = 0) %>%
e_tooltip(trigger = "axis", axisPointer = list(type = "shadow")) %>%
e_x_axis(name = "Scénario") %>%
e_y_axis(name = "Occurrences")%>%
e_toolbox_feature() %>%
e_toolbox_feature(
feature = "magicType",
type = list("line", "bar")
)
top_30 %>%
e_charts(Count) %>%
e_bar(Scenario) %>%
e_tooltip(trigger = "axis", axisPointer = list(type = "shadow")) %>%
e_x_axis(name = "Scénario") %>%
e_y_axis(name = "Occurrences")%>%
e_toolbox_feature() %>%
e_toolbox_feature(
feature = "magicType",
type = list("line", "bar")
)
top_30 %>%
e_charts(Count) %>%
e_bar(Scenario, y_index = 1,
x_index = 0) %>%
e_tooltip(trigger = "axis", axisPointer = list(type = "shadow")) %>%
e_x_axis(name = "Occurrences") %>%
e_y_axis(name = "Scénario")%>%
e_toolbox_feature() %>%
e_toolbox_feature(
feature = "magicType",
type = list("line", "bar")
)
top_30 %>%
e_charts(Count) %>%
e_bar(Scenario, y_index = 1,
x_index = 1) %>%
e_tooltip(trigger = "axis", axisPointer = list(type = "shadow")) %>%
e_x_axis(name = "Occurrences") %>%
e_y_axis(name = "Scénario")%>%
e_toolbox_feature() %>%
e_toolbox_feature(
feature = "magicType",
type = list("line", "bar")
)
top_30 %>%
e_charts(Count) %>%
e_bar(Scenario, y_index = 0,
x_index = 1) %>%
e_tooltip(trigger = "axis", axisPointer = list(type = "shadow")) %>%
e_x_axis(name = "Occurrences") %>%
e_y_axis(name = "Scénario")%>%
e_toolbox_feature() %>%
e_toolbox_feature(
feature = "magicType",
type = list("line", "bar")
)
1
top_30 %>%
e_charts(Count) %>%
e_bar(Scenario, y_index = 1,
x_index = 1) %>%
e_tooltip(trigger = "axis", axisPointer = list(type = "shadow")) %>%
e_x_axis(name = "Occurrences") %>%
e_y_axis(name = "Scénario")%>%
e_toolbox_feature() %>%
e_toolbox_feature(
feature = "magicType",
type = list("line", "bar")
)
top_30 %>%
e_charts(Count) %>%
e_bar(Scenario) %>%
e_tooltip(trigger = "axis", axisPointer = list(type = "shadow")) %>%
e_x_axis(name = "Occurrences") %>%
e_y_axis(name = "Scénario")%>%
e_toolbox_feature() %>%
e_toolbox_feature(
feature = "magicType",
type = list("line", "bar")
)
top_30 %>%
e_charts(Count) %>%
e_bar(Scenario)
top_30 %>%
e_charts(Count) %>%
e_bar(Scenario) %>%
e_flip_coords()
top_30 %>%
e_charts(Scenario) %>%
e_bar(Count) %>%
e_flip_coords()
top_30 %>%
e_charts(Scenario) %>%
e_bar(Count) %>%
e_flip_coords() %>%
e_tooltip(trigger = "axis", axisPointer = list(type = "shadow")) %>%
e_x_axis(name = "Occurrences") %>%
e_y_axis(name = "Scénario")%>%
e_toolbox_feature() %>%
e_toolbox_feature(
feature = "magicType",
type = list("line", "bar")
)
top_30 %>%
e_charts(Scenario) %>%
e_bar(Count) %>%
e_flip_coords() %>%
e_x_axis(name = "Occurrences") %>%
e_y_axis(name = "Scénario")%>%
e_toolbox_feature() %>%
e_toolbox_feature(
feature = "magicType",
type = list("line", "bar")
)
top_30 %>%
e_charts(Scenario) %>%
e_bar(Count) %>%
e_flip_coords() %>%
e_tooltip(trigger = "axis", axisPointer = list(type = "shadow")) %>%
e_x_axis(name = "Occurrences") %>%
e_y_axis(name = "Scénario")%>%
e_toolbox_feature() %>%
e_toolbox_feature(
feature = "magicType",
type = list("line", "bar")
) %>%
e_legend(type = "scroll",  orient = "vertical", right = "0%", top = "10%")
top_30_sorted <- top_30 %>%
arrange(desc(Count))
# Créer le graphique
top_30_sorted %>%
e_charts(Scenario) %>%
e_bar(Count) %>%
e_flip_coords() %>%
e_tooltip(trigger = "axis", axisPointer = list(type = "shadow")) %>%
e_x_axis(name = "Occurrences") %>%
e_y_axis(name = "Scénario") %>%
e_toolbox_feature() %>%
e_toolbox_feature(
feature = "magicType",
type = list("line", "bar")
) %>%
e_legend(type = "scroll", orient = "vertical", right = "0%", top = "10%")
top_30_sorted
# Créer le graphique
top_30_sorted %>%
e_charts(Scenario) %>%
e_bar(desc(Count)) %>%
e_flip_coords() %>%
e_tooltip(trigger = "axis", axisPointer = list(type = "shadow")) %>%
e_x_axis(name = "Occurrences") %>%
e_y_axis(name = "Scénario") %>%
e_toolbox_feature() %>%
e_toolbox_feature(
feature = "magicType",
type = list("line", "bar")
) %>%
e_legend(type = "scroll", orient = "vertical", right = "0%", top = "10%")
runApp()
shiny::runApp()
library(plotly)
library(wordcloud2)
########plotly####################### Analyse des scenarios ############################
############## Scenario en anglais
path_data_en_AFB23 <- file.path(path_data,"en_info_data_AFB2023.json")
# read data2
info_data_en_AFB2023 <- fromJSON(path_data_en_AFB23)
# info_data_en_AFB2023$Start_time_discusion <- ymd_hms(info_data_en_AFB2023$Start_time_discusion)
# info_data_en_AFB2023$End_time_discusion <- ymd_hms(info_data_en_AFB2023$End_time_discusion)
# info_data_en_AFB2023$Start_time_chatbot <- ymd_hms(info_data_en_AFB2023$Start_time_chatbot)
# info_data_en_AFB2023$End_time_chatbot <- ymd_hms(info_data_en_AFB2023$End_time_chatbot)
# info_data_en_AFB2023$Start_time_agent <- ymd_hms(info_data_en_AFB2023$Start_time_agent)
# info_data_en_AFB2023$End_time_agent <- ymd_hms(info_data_en_AFB2023$End_time_agent)
data_en <- info_data_en_AFB2023
# Nettoyage des données en supprimant les valeurs manquantes
data_clean <- data_en$Scenario_Chatbot[!is.na(data_en$Scenario_Chatbot)]
# Compter les occurrences de chaque scénario
data_scenario_counts <- as.data.frame(table(unlist(data_clean)))
scenario_counts <- table(unlist(data_clean))
# Créer un dataframe à partir des résultats
scenario_df <- data.frame(Scenario = names(scenario_counts), Count = as.numeric(scenario_counts))
# Réinitialiser les index du dataframe
rownames(scenario_df) <- NULL
# Retirer les chiffres, les deux points et le mot "for" au début de chaque scénario
scenario_df$Scenario <- gsub("^(\\d{1,}:)", "", scenario_df$Scenario)
# Retirer tous les "for " de la chaîne
scenario_df$Scenario <- gsub("for ", "", scenario_df$Scenario)
# Trouver les indices des scénarios contenant "Press" et "return"
indices <- grep("Press|return", scenario_df$Scenario)
# Supprimer les scénarios correspondants du dataframe
scenario_df <- scenario_df[-indices, ]
# Réinitialiser les index du dataframe
rownames(scenario_df) <- NULL
# Trier les données par nombre d'occurrences
scenario_df <- scenario_df[order(scenario_df$Count, decreasing = TRUE), ]
# Créer un graphique interactif avec Plotly
plot_ly(scenario_df, x = ~Count, y = ~Scenario, type = 'bar', orientation = 'h') %>%
layout(title = "Fréquence des scénarios de chatbot",
xaxis = list(title = "Nombre d'occurrences"),
yaxis = list(title = "Scénario"))
# Wordcloud sur les scenario
# Affichage du nuage de mots interactif avec wordcloud2
wordcloud2(scenario_df,  size = 2)
data_clean
data_clean[1:10]
# Créer une liste de paires de relations (arêtes)
edges <- list()
for (conversation in data_clean) {
previous_option <- NULL
for (option in conversation) {
if (!is.na(option)) {
if (!is.null(previous_option)) {
edges <- append(edges, list(c(previous_option, option)))
}
previous_option <- option
}
}
}
previous_option
edges
# Convertir la liste en data frame
edges_df <- do.call(rbind, edges) %>%
as.data.frame() %>%
rename(from = V1, to = V2)
edges_df
# Créer le graphe
graph <- tbl_graph(edges = edges_df, directed = TRUE)
install.packages("igraph")
install.packages("ggraph")
install.packages("tidygraph")
install.packages("tidyverse")
library(wordcloud2)
library(igraph)
library(ggraph)
library(tidygraph)
library(tidyverse)
# Créer le graphe
graph <- tbl_graph(edges = edges_df, directed = TRUE)
# Visualiser le graphe
ggraph(graph, layout = "fr") +
geom_edge_link(aes(start_cap = label_rect(node1.name), end_cap = label_rect(node2.name)), arrow = arrow(length = unit(4, 'mm')), end_shape = 'circle') +
geom_node_label(aes(label = name), size = 5, repel = TRUE, fill = 'lightblue') +
theme_void() +
ggtitle("Graphe de Connaissance des Scénarios Chatbot des Clients")
f
graph
install.packages("visNetwork")
library(visNetwork)
# Créer une liste de paires de relations (arêtes)
edges <- list()
nodes <- unique(unlist(data_clean)) %>% na.omit()
nodes_df <- data.frame(id = nodes, label = nodes)
for (conversation in data_clean) {
previous_option <- NULL
for (option in conversation) {
if (!is.na(option)) {
if (!is.null(previous_option)) {
edges <- append(edges, list(c(previous_option, option)))
}
previous_option <- option
}
}
}
# Convertir la liste en data frame
edges_df <- do.call(rbind, edges) %>%
as.data.frame() %>%
rename(from = V1, to = V2)
edges_df
# Création et visualisation du graphe interactif
visNetwork(nodes_df, edges_df) %>%
visEdges(arrows = 'to') %>%
visLayout(randomSeed = 123) %>%
visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %>%
visInteraction(navigationButtons = TRUE) %>%
visPhysics(stabilization = TRUE)
# Création et visualisation du graphe interactif
visNetwork(nodes_df, edges_df) %>%
visEdges(arrows = 'to') %>%
visLayout(randomSeed = 123)
# Création et visualisation du graphe interactif
visNetwork(nodes_df, edges_df)
nodes_df
edges_df
# Création et visualisation du graphe interactif
visNetwork(nodes_df, edges_df) %>%
visEdges(arrows = 'to') %>%
visLayout(randomSeed = 123) %>%
visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %>%
visInteraction(navigationButtons = TRUE) %>%
visPhysics(stabilization = TRUE)
# Créer une liste de paires de relations (arêtes)
edges <- list()
nodes <- unique(unlist(data_clean)) %>% na.omit()
nodes_df <- data.frame(id = nodes, name = nodes)
for (conversation in data_clean) {
previous_option <- NULL
for (option in conversation) {
if (!is.na(option)) {
if (!is.null(previous_option)) {
edges <- append(edges, list(c(previous_option, option)))
}
previous_option <- option
}
}
}
# Convertir la liste en data frame
edges_df <- do.call(rbind, edges) %>%
as.data.frame() %>%
rename(source = V1, target = V2)
# Créer les données pour les nœuds et les arêtes
nodes_list <- nodes_df %>%
mutate(category = "Option") %>%
mutate(value = 1)
nodes_list
edges_list <- edges_df %>%
mutate(value = 1)
edges_list
# Visualiser le graphe interactif avec echarts4r
nodes_list %>%
e_charts() %>%
e_graph(
nodes = nodes_list,
edges = edges_list,
layout = "force"
) %>%
e_graph_nodes(
symbol_size = 50
) %>%
e_title("Graphe de Connaissance des Scénarios Chatbot des Clients") %>%
e_tooltip() %>%
e_graph_labels(position = "inside") %>%
e_graph_edge_symbol(c("circle", "arrow")) %>%
e_graph_edge_symbol_size(c(4, 10)) %>%
e_graph_edge_label(show = TRUE, formatter = htmlwidgets::JS("function(params){return params.data.value}"))
# Visualiser le graphe interactif avec echarts4r
nodes_list %>%
e_charts() %>%
e_graph(
nodes = nodes_list,
edges = edges_list,
layout = "force"
) %>%
e_graph_nodes(
symbol_size = 50
) %>%
e_title("Graphe de Connaissance des Scénarios Chatbot des Clients") %>%
e_tooltip()
# Visualiser le graphe interactif avec echarts4r
nodes_list %>%
e_charts() %>%
e_graph(
nodes = nodes_list,
edges = edges_list,
layout = "force"
) %>%
e_graph_nodes(
) %>%
e_title("Graphe de Connaissance des Scénarios Chatbot des Clients") %>%
e_tooltip()
# Visualiser le graphe interactif avec echarts4r
chart <- nodes_list %>%
e_charts() %>%
e_graph(
nodes = nodes_list,
edges = edges_list,
layout = "force"
)
chart
e_graph_nodes(
chart
) %>%
e_title("Graphe de Connaissance des Scénarios Chatbot des Clients") %>%
e_tooltip()
# Visualiser le graphe interactif avec echarts4r
chart <- nodes_list %>%
e_charts() %>%
e_graph(
nodes = nodes_list,
edges = edges_list,
layout = "force"
)
chart
# Créer une liste de paires de relations (arêtes)
edges <- list()
nodes <- unique(unlist(data_clean)) %>% na.omit()
nodes_df <- data.frame(name = nodes, value = 1, size = 10, category = "Option", symbol = "circle")
for (conversation in data_clean) {
previous_option <- NULL
for (option in conversation) {
if (!is.na(option)) {
if (!is.null(previous_option)) {
edges <- append(edges, list(c(previous_option, option)))
}
previous_option <- option
}
}
}
# Convertir la liste en data frame
edges_df <- do.call(rbind, edges) %>%
as.data.frame() %>%
rename(source = V1, target = V2)
# Création et visualisation du graphe interactif
e_charts() %>%
e_graph(layout = "force") %>%
e_graph_nodes(nodes_df, name, value, size, category, symbol) %>%
e_graph_edges(edges_df, source, target) %>%
e_tooltip() %>%
e_title("Graphe de Connaissance des Scénarios Chatbot des Clients")
shiny::runApp()
runApp('C:/Kaeyros/chatbot_nlp/NLP_chatbot-master')
install.packages("purrrlyr")
runApp('C:/Kaeyros/chatbot_nlp/NLP_chatbot-master')
runApp('C:/Kaeyros/chatbot_nlp/NLP_chatbot-master')
runApp('C:/Kaeyros/chatbot_nlp/Turkish-Chatbot-Machine-Learning-Model-main')
install.packages("rapport")
runApp('C:/Kaeyros/chatbot_nlp/Turkish-Chatbot-Machine-Learning-Model-main')
runApp('C:/Kaeyros/chatbot_nlp/Turkish-Chatbot-Machine-Learning-Model-main')
runApp('C:/Kaeyros/chatbot_nlp/Turkish-Chatbot-Machine-Learning-Model-main')
shiny::runApp()
shiny::runApp()
df_total_en
View(df_total_en)
shiny::runApp()
combined_data
combined_data %>%
e_charts(Start_time_discusion) %>%
e_line(first_response_hours, name = "First Response Time") %>%
e_line(full_resolution_hours, name = "Full Resolution Time") %>%
e_x_axis(name = "Date") %>%
e_y_axis(name = "Time") %>%
e_tooltip(trigger = "axis") %>%
e_legend(type = "scroll",  orient = "vertical", right = "0%", top = "10%") %>%
e_toolbox_feature() %>%
e_toolbox_feature(
feature = "magicType",
type = list("line", "bar")
)
combined_data %>%
e_charts(Start_time_discusion) %>%
e_line(first_response_hours, name = "First Response Time") %>%
e_line(full_resolution_hours, name = "Full Resolution Time") %>%
e_x_axis(name = "Date") %>%
e_y_axis(name = "Time") %>%
e_legend(type = "scroll",  orient = "vertical", right = "0%", top = "10%") %>%
e_toolbox_feature() %>%
e_toolbox_feature(
feature = "magicType",
type = list("line", "bar")
)
shiny::runApp()
sentiment_scores
sentiment_data$value
sentiment_data
view
View(sentiment_data)
